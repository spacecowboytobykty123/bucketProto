// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: bucket/bucket.proto

package bckt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bucket_AddToBucket_FullMethodName   = "/bucket.Bucket/AddToBucket"
	Bucket_DelFromBucket_FullMethodName = "/bucket.Bucket/DelFromBucket"
	Bucket_GetBucket_FullMethodName     = "/bucket.Bucket/GetBucket"
	Bucket_CreateBucket_FullMethodName  = "/bucket.Bucket/CreateBucket"
)

// BucketClient is the client API for Bucket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BucketClient interface {
	AddToBucket(ctx context.Context, in *AddToBucketRequest, opts ...grpc.CallOption) (*AddToBucketResponse, error)
	DelFromBucket(ctx context.Context, in *DelFromBucketRequest, opts ...grpc.CallOption) (*DelFromBucketResponse, error)
	GetBucket(ctx context.Context, in *GetBucketRequest, opts ...grpc.CallOption) (*GetBucketResponse, error)
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error)
}

type bucketClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketClient(cc grpc.ClientConnInterface) BucketClient {
	return &bucketClient{cc}
}

func (c *bucketClient) AddToBucket(ctx context.Context, in *AddToBucketRequest, opts ...grpc.CallOption) (*AddToBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToBucketResponse)
	err := c.cc.Invoke(ctx, Bucket_AddToBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) DelFromBucket(ctx context.Context, in *DelFromBucketRequest, opts ...grpc.CallOption) (*DelFromBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelFromBucketResponse)
	err := c.cc.Invoke(ctx, Bucket_DelFromBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) GetBucket(ctx context.Context, in *GetBucketRequest, opts ...grpc.CallOption) (*GetBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBucketResponse)
	err := c.cc.Invoke(ctx, Bucket_GetBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBucketResponse)
	err := c.cc.Invoke(ctx, Bucket_CreateBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketServer is the server API for Bucket service.
// All implementations must embed UnimplementedBucketServer
// for forward compatibility.
type BucketServer interface {
	AddToBucket(context.Context, *AddToBucketRequest) (*AddToBucketResponse, error)
	DelFromBucket(context.Context, *DelFromBucketRequest) (*DelFromBucketResponse, error)
	GetBucket(context.Context, *GetBucketRequest) (*GetBucketResponse, error)
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error)
	mustEmbedUnimplementedBucketServer()
}

// UnimplementedBucketServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBucketServer struct{}

func (UnimplementedBucketServer) AddToBucket(context.Context, *AddToBucketRequest) (*AddToBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBucket not implemented")
}
func (UnimplementedBucketServer) DelFromBucket(context.Context, *DelFromBucketRequest) (*DelFromBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFromBucket not implemented")
}
func (UnimplementedBucketServer) GetBucket(context.Context, *GetBucketRequest) (*GetBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucket not implemented")
}
func (UnimplementedBucketServer) CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedBucketServer) mustEmbedUnimplementedBucketServer() {}
func (UnimplementedBucketServer) testEmbeddedByValue()                {}

// UnsafeBucketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketServer will
// result in compilation errors.
type UnsafeBucketServer interface {
	mustEmbedUnimplementedBucketServer()
}

func RegisterBucketServer(s grpc.ServiceRegistrar, srv BucketServer) {
	// If the following call pancis, it indicates UnimplementedBucketServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bucket_ServiceDesc, srv)
}

func _Bucket_AddToBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).AddToBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bucket_AddToBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).AddToBucket(ctx, req.(*AddToBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_DelFromBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFromBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).DelFromBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bucket_DelFromBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).DelFromBucket(ctx, req.(*DelFromBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_GetBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).GetBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bucket_GetBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).GetBucket(ctx, req.(*GetBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bucket_CreateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bucket_ServiceDesc is the grpc.ServiceDesc for Bucket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bucket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bucket.Bucket",
	HandlerType: (*BucketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToBucket",
			Handler:    _Bucket_AddToBucket_Handler,
		},
		{
			MethodName: "DelFromBucket",
			Handler:    _Bucket_DelFromBucket_Handler,
		},
		{
			MethodName: "GetBucket",
			Handler:    _Bucket_GetBucket_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _Bucket_CreateBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bucket/bucket.proto",
}

const (
	BucketService_AddToBucket_FullMethodName   = "/bucket.BucketService/AddToBucket"
	BucketService_DelFromBucket_FullMethodName = "/bucket.BucketService/DelFromBucket"
	BucketService_GetBucket_FullMethodName     = "/bucket.BucketService/GetBucket"
	BucketService_CreateBucket_FullMethodName  = "/bucket.BucketService/CreateBucket"
)

// BucketServiceClient is the client API for BucketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Internal or alternate service definition without HTTP bindings
type BucketServiceClient interface {
	AddToBucket(ctx context.Context, in *AddToBucketRequest, opts ...grpc.CallOption) (*AddToBucketResponse, error)
	DelFromBucket(ctx context.Context, in *DelFromBucketRequest, opts ...grpc.CallOption) (*DelFromBucketResponse, error)
	GetBucket(ctx context.Context, in *GetBucketRequest, opts ...grpc.CallOption) (*GetBucketResponse, error)
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error)
}

type bucketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketServiceClient(cc grpc.ClientConnInterface) BucketServiceClient {
	return &bucketServiceClient{cc}
}

func (c *bucketServiceClient) AddToBucket(ctx context.Context, in *AddToBucketRequest, opts ...grpc.CallOption) (*AddToBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToBucketResponse)
	err := c.cc.Invoke(ctx, BucketService_AddToBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) DelFromBucket(ctx context.Context, in *DelFromBucketRequest, opts ...grpc.CallOption) (*DelFromBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelFromBucketResponse)
	err := c.cc.Invoke(ctx, BucketService_DelFromBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) GetBucket(ctx context.Context, in *GetBucketRequest, opts ...grpc.CallOption) (*GetBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBucketResponse)
	err := c.cc.Invoke(ctx, BucketService_GetBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBucketResponse)
	err := c.cc.Invoke(ctx, BucketService_CreateBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketServiceServer is the server API for BucketService service.
// All implementations must embed UnimplementedBucketServiceServer
// for forward compatibility.
//
// Internal or alternate service definition without HTTP bindings
type BucketServiceServer interface {
	AddToBucket(context.Context, *AddToBucketRequest) (*AddToBucketResponse, error)
	DelFromBucket(context.Context, *DelFromBucketRequest) (*DelFromBucketResponse, error)
	GetBucket(context.Context, *GetBucketRequest) (*GetBucketResponse, error)
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error)
	mustEmbedUnimplementedBucketServiceServer()
}

// UnimplementedBucketServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBucketServiceServer struct{}

func (UnimplementedBucketServiceServer) AddToBucket(context.Context, *AddToBucketRequest) (*AddToBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBucket not implemented")
}
func (UnimplementedBucketServiceServer) DelFromBucket(context.Context, *DelFromBucketRequest) (*DelFromBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFromBucket not implemented")
}
func (UnimplementedBucketServiceServer) GetBucket(context.Context, *GetBucketRequest) (*GetBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucket not implemented")
}
func (UnimplementedBucketServiceServer) CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedBucketServiceServer) mustEmbedUnimplementedBucketServiceServer() {}
func (UnimplementedBucketServiceServer) testEmbeddedByValue()                       {}

// UnsafeBucketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketServiceServer will
// result in compilation errors.
type UnsafeBucketServiceServer interface {
	mustEmbedUnimplementedBucketServiceServer()
}

func RegisterBucketServiceServer(s grpc.ServiceRegistrar, srv BucketServiceServer) {
	// If the following call pancis, it indicates UnimplementedBucketServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BucketService_ServiceDesc, srv)
}

func _BucketService_AddToBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).AddToBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_AddToBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).AddToBucket(ctx, req.(*AddToBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_DelFromBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFromBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).DelFromBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_DelFromBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).DelFromBucket(ctx, req.(*DelFromBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_GetBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).GetBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_GetBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).GetBucket(ctx, req.(*GetBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_CreateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BucketService_ServiceDesc is the grpc.ServiceDesc for BucketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BucketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bucket.BucketService",
	HandlerType: (*BucketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToBucket",
			Handler:    _BucketService_AddToBucket_Handler,
		},
		{
			MethodName: "DelFromBucket",
			Handler:    _BucketService_DelFromBucket_Handler,
		},
		{
			MethodName: "GetBucket",
			Handler:    _BucketService_GetBucket_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _BucketService_CreateBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bucket/bucket.proto",
}
