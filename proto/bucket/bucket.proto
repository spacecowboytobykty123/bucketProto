syntax = "proto3";

package bucket;

option go_package = "bucket.v1;bckt";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Bucket API";
    version: "1.0";
    description: "API for managing a user's bucket, including adding, removing, viewing toys, and creating a new bucket.";
    contact: {
      name: "Support Team";
      url: "https://yourdomain.com";
      email: "support@yourdomain.com";
    }
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service Bucket {
  rpc AddToBucket (AddToBucketRequest) returns (AddToBucketResponse) {
    option (google.api.http) = {
      post: "/v1/bucket"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add toy to bucket"
      description: "Adds a toy to the user's bucket."
    };
  }

  rpc DelFromBucket (DelFromBucketRequest) returns (DelFromBucketResponse) {
    option (google.api.http) = {
      delete: "/v1/bucket/{toy_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Remove toy from bucket"
      description: "Deletes a specific toy from the user's bucket by toy ID."
    };
  }

  rpc GetBucket (GetBucketRequest) returns (GetBucketResponse) {
    option (google.api.http) = {
      get: "/v1/bucket"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get bucket contents"
      description: "Retrieves the list of toys currently in the user's bucket."
    };
  }

  rpc CreateBucket (CreateBucketRequest) returns (CreateBucketResponse) {
    option (google.api.http) = {
      post: "/v1/createBucket"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new bucket"
      description: "Initializes a new bucket for the user."
    };
  }
}

// Internal or alternate service definition without HTTP bindings
service BucketService {
  rpc AddToBucket (AddToBucketRequest) returns (AddToBucketResponse);
  rpc DelFromBucket (DelFromBucketRequest) returns (DelFromBucketResponse);
  rpc GetBucket (GetBucketRequest) returns (GetBucketResponse);
  rpc CreateBucket (CreateBucketRequest) returns (CreateBucketResponse);
}

enum OperationStatus {
  STATUS_OK = 0;
  STATUS_INTERNAL_ERROR = 1;
  STATUS_BUCKET_EMPTY = 2;
  STATUS_UNAUTHORIZED = 3;
}

message Toy {
  int64 toy_id = 1;
  string name = 2;
  int64 value = 3;
  string image_url = 4;
  int32 quantity = 5;
}

message ToyBucket {
  int64 toy_id = 1;
  int32 quantity = 2;
}

message AddToBucketRequest {
  repeated ToyBucket toys = 1;
}

message AddToBucketResponse {
  OperationStatus status = 1;
  string msg = 2;
}

message DelFromBucketRequest {
  repeated int64 toy_id = 1;
}

message DelFromBucketResponse {
  OperationStatus status = 1;
  string msg = 2;
}

message GetBucketRequest {}

message GetBucketResponse {
  repeated Toy toys = 1;
  int32 quantity = 2;
}

message CreateBucketRequest {}

message CreateBucketResponse{
  OperationStatus status = 1;
  string msg = 2;
}